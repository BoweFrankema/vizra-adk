<?php

namespace {{ namespace }};

use Vizra\VizraADK\Agents\BaseLlmAgent;
use Vizra\VizraADK\Contracts\ToolInterface;
use Vizra\VizraADK\System\AgentContext;
// use App\Tools\YourTool; // Example: Import your tool

class {{ class }} extends BaseLlmAgent
{
    protected string $name = '{{ agentName }}';
    protected string $description = 'Describe what this agent does.';

    /**
     * System prompt / instructions for the LLM.
     */
    protected string $instructions = 'You are a helpful assistant. Your name is {{ agentName }}.';

    protected string $model = '';

    protected array $tools = [
        // Example: YourTool::class,
    ];

    /**
     * Example of an overridable hook method.
     * Modify the input messages array before it's sent to the LLM.
     *
     * @param array $inputMessages The array of messages prepared for the LLM.
     * @param AgentContext $context The current agent context.
     * @return array The modified messages array.
     */
    public function beforeLlmCall(array $inputMessages, AgentContext $context): array
    {
        // $context->setState('custom_data_for_llm', 'some_value');
        // $inputMessages[] = ['role' => 'system', 'content' => 'Additional system note for this call.'];
        return parent::beforeLlmCall($inputMessages, $context);
    }

    // Optional hook methods to override:
    // public function afterLlmResponse(mixed $response, AgentContext $context): mixed { /* ... */ return parent::afterLlmResponse($response, $context); }
    // public function beforeToolCall(string $toolName, array $arguments, AgentContext $context): array { /* ... */ return parent::beforeToolCall($toolName, $arguments, $context); }
    // public function afterToolResult(string $toolName, string $result, AgentContext $context): string { /* ... */ return parent::afterToolResult($toolName, $result, $context); }
}
